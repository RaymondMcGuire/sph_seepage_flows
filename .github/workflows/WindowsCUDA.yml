# Windows builds.
name: WindowsCUDA

on:
  push:
    branches: [ main ]
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/WindowsCUDA.yml"
    tags:
      - 'v*'
  # pull_request:
  #   paths:
  #     - "**"
  #     - "!.github"
  #     - ".github/workflows/Windows.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # Windows2019 & VS 2019 supports 10.1+
          - os: windows-2019
            cuda: "11.0.167"
            visual_studio: "Visual Studio 16 2019"
          #- os: windows-2019
          #  cuda: "10.2.89"
          #  visual_studio: "Visual Studio 16 2019"
          #- os: windows-2019
          #  cuda: "10.1.243"
          #  visual_studio: "Visual Studio 16 2019"

          # Windows2016 & VS 2017 supports 10.0+
          # - os: windows-2016
          #   cuda: "11.0.167"
          #   visual_studio: "Visual Studio 15 2017"
          # - os: windows-2016
          #   cuda: "10.2.89"
          #   visual_studio: "Visual Studio 15 2017"
          # - os: windows-2016
          #   cuda: "10.1.243"
          #   visual_studio: "Visual Studio 15 2017"
          # - os: windows-2016
          #   cuda: "10.0.130"
          #   visual_studio: "Visual Studio 15 2017"

    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2
      with:
        ssh-key: ${{ secrets.KIRI_SSH }}
        ssh-known-hosts: ${{ secrets.KIRI_KNOWN_HOSTS }}
        submodules: 'true'

    - name: Install CUDA
      env: 
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      shell: powershell
      run: |
        # Install CUDA via a powershell script
        .\scripts\actions\install_cuda_windows.ps1
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
          echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }

    - name: nvcc check
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include

    - name: cmake version
      shell: bash
      run: cmake --version

    - name: Configure CMake
      id: configure
      shell: bash
      run: cmake . -B ${{ env.build_dir }} -G "${{ matrix.visual_studio }}" -A x64 

    - name: Configure Error Processing
      if: ${{ (failure() && steps.configure.outcome == 'failure') || success() }}
      working-directory: ${{ env.build_dir }}
      shell: bash
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

    - name: Build
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --config ${{ env.config }} --target ALL_BUILD --verbose
